/*
** server.c -- a stream socket server demo
*/

#include <iostream>
#include <moveit/move_group_interface/move_group.h>
#include <moveit/planning_scene_interface/planning_scene_interface.h>
#include <moveit_msgs/DisplayRobotState.h>
#include <moveit_msgs/DisplayTrajectory.h>
#include <moveit_msgs/AttachedCollisionObject.h>
#include <moveit_msgs/CollisionObject.h>

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <math.h>

#define PORT "5556"  // the port users will be connecting to

#define BACKLOG 10	 // how many pending connections queue will hold
#define MAXDATASIZE 100

void sigchld_handler(int s)
{
	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
	if (sa->sa_family == AF_INET) {
		return &(((struct sockaddr_in*)sa)->sin_addr);
	}

	return &(((struct sockaddr_in6*)sa)->sin6_addr);
}


void setPoint(char* buf, geometry_msgs::Pose* pose)
{
	std::string str(buf);
	std::vector<std::string> p;
	int po[7];
	po[0] = str.find("[")+1;
	po[6] = str.find("]")+1;

	for(int i=0; i<6; i++) {
		po[i+1] = str.find(",",po[i])+1;
		p.push_back(str.substr(po[i],po[i+1]-po[i]-1));
	}

	pose->position.x = std::atof(p[0].c_str())/1000;
	pose->position.y = std::atof(p[1].c_str())/1000;
	pose->position.z = std::atof(p[2].c_str())/1000;

	float cx = cos(std::atof(p[0].c_str())/2);
	float sx = sin(std::atof(p[0].c_str())/2);
	float cy = cos(std::atof(p[1].c_str())/2);
	float sy = sin(std::atof(p[1].c_str())/2);
	float cz = cos(std::atof(p[2].c_str())/2);
	float sz = sin(std::atof(p[2].c_str())/2);

	pose->orientation.w = cx*cy*cz + sx*sy*sz;
	pose->orientation.x = sx*cy*cz + cx*sy*sz;
	pose->orientation.y = cx*sy*cz + sx*cy*sz;
	pose->orientation.z = cx*cy*sz + sx*sy*cz;

//	std::cout<<cx<<":"<<sx<<":"<<cy<<":"<<sy<<":"<<cz<<":"<<sz<<std::endl;
	std::cout<<pose->position.x<<pose->position.y<<pose->position.z<<pose->orientation.w<<pose->orientation.x<<pose->orientation.y<<pose->orientation.z<<std::endl;
}

int main(int argc, char** argv)
{
	int sockfd, new_fd;  // listen on sock_fd, new connection on new_fd
	struct addrinfo hints, *servinfo, *p;
	struct sockaddr_storage their_addr; // connector's address information
	socklen_t sin_size;
	struct sigaction sa;
	int yes=1;
	char s[INET6_ADDRSTRLEN];
	int rv;

	ros::init(argc, argv, "test_tcp_node");
	ros::NodeHandle node_handle;
	ros::AsyncSpinner spinner(1);
	spinner.start();
	moveit::planning_interface::MoveGroup group("manipulator");
	moveit::planning_interface::PlanningSceneInterface planning_scene_interface;
	ros::Publisher display_publisher = node_handle.advertise<moveit_msgs::DisplayTrajectory>("/move_group/display_planned_path", 1, true);
	moveit_msgs::DisplayTrajectory display_trajectory;

	geometry_msgs::Pose target_pose1;
	geometry_msgs::Pose target_pose_t;

	memset(&hints, 0, sizeof hints);
	hints.ai_family = AF_UNSPEC;
	hints.ai_socktype = SOCK_STREAM;
	hints.ai_flags = AI_PASSIVE; // use my IP

	if ((rv = getaddrinfo(NULL, PORT, &hints, &servinfo)) != 0) {
		fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
		return 1;
	}

	// loop through all the results and bind to the first we can
	for(p = servinfo; p != NULL; p = p->ai_next) {
		if ((sockfd = socket(p->ai_family, p->ai_socktype,
				p->ai_protocol)) == -1) {
			perror("server: socket");
			continue;
		}

		if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

		if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
			close(sockfd);
			perror("server: bind");
			continue;
		}

		break;
	}

	freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  {
		fprintf(stderr, "server: failed to bind\n");
		exit(1);
	}

	if (listen(sockfd, BACKLOG) == -1) {
		perror("listen");
		exit(1);
	}

	sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

	printf("server: waiting for connections...\n");

	int numbytes;
	char buf[MAXDATASIZE];
	char buf_t[MAXDATASIZE];

	while(1) {  // main accept() loop
		sin_size = sizeof their_addr;
		new_fd = accept(sockfd, (struct sockaddr *)&their_addr, &sin_size);
		if (new_fd == -1) {
			perror("accept");
			continue;
		}

		inet_ntop(their_addr.ss_family,
			get_in_addr((struct sockaddr *)&their_addr),
			s, sizeof s);
		printf("server: got connection from %s\n", s);

		if (!fork()) { // this is the child process
			close(sockfd); // child doesn't need the listener
//			if (send(new_fd, "Hello, world!", 13, 0) == -1)
	//			perror("send");
			//
			//接收数据处理函数
			while(1) {
				if ((numbytes = recv(new_fd, buf, MAXDATASIZE-1, 0)) == -1) {
						perror("recv");
						exit(1);
				}
				buf[numbytes] = '\0';

				if(numbytes == 0) {
					close(new_fd);
					exit(1);
				}

				if(buf[0] == 'm') {
					setPoint(buf, &target_pose1);
					std::cout<<"get one point"<<std::endl;

					geometry_msgs::Pose target_pose0 = target_pose1;
					geometry_msgs::Pose target_pose2 = target_pose1;
					target_pose0.position.z -= 0.1;
					target_pose2.position.x -= 0.1;
						
//				group.setPoseTarget(target_pose0);
//				bool success = group.move();
//				ROS_INFO("Visuallizing plan 1 (pose goal) %s", success?"":"FAILED");

	std::cout<<target_pose1.position.x<<target_pose1.position.y<<target_pose1.position.z<<target_pose1.orientation.w<<target_pose1.orientation.x<<target_pose1.orientation.y<<target_pose1.orientation.z<<std::endl;
				group.setPoseTarget(target_pose1);
				std::cout<<"1"<<std::endl;
				bool success = group.move();
				std::cout<<"2"<<std::endl;
				ROS_INFO("Visuallizing plan 2 (pose goal) %s", success?"":"FAILED");
//
//				group.setPoseTarget(target_pose0);
//				success = group.move();
//				ROS_INFO("Visuallizing plan 3 (pose goal) %s", success?"":"FAILED");
//
//				group.setPoseTarget(target_pose2);
//				success = group.move();
//				ROS_INFO("Visuallizing plan 4 (pose goal) %s", success?"":"FAILED");
//
//					ros::shutdown();
				}
			}
			close(new_fd);
			exit(0);
		}
		close(new_fd);  // parent doesn't need this
	}
	return 0;
}

